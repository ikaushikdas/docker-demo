pipeline {
    agent any

    stages{
        stage('preparation') {
            steps {
                git 'https://github.com/ikaushikdas/docker-demo.git'
            }
        }
        stage('Build Docker Image'){
           
            steps{
                script {
                //dockerImage = docker.build("node-app:${BUILD_NUMBER}")  
                dockerImage = docker.build("node-app:latest")    
                }  

            }
        }

        stage('Delete Existing Image From ECR'){
            steps{
                script{
                    withAWS(credentials:'aws-creds', region:'ap-south-1') {
                    // sh 'aws ecr list-images \
                    //     --repository-name node-app'
                    sh 'aws ecr batch-delete-image \
                    --repository-name node-app \
                    --image-ids imageTag=latest'
                    }             
                }
            }
        }
        
        stage('Push To ECR'){
           
            steps{
                script {
                    docker.withRegistry("https://116361412831.dkr.ecr.ap-south-1.amazonaws.com/node-app", "ecr:ap-south-1:aws-creds") {
                    dockerImage.push()
                    }

                } 

            }
        
        
        
        }
        stage('Push To ECS'){
           
            steps{
                script{
                    withAWS(credentials:'aws-creds', region:'ap-south-1') {

                    sh 'aws ecs update-service \
                    --cluster AWSFarget  \
                    --service ECSservice1  \
                    --task-definition Ecs-task1:1 \
                    --desired-count 1          \
                    --force-new-deployment'
                    }             
                }

            }
        
        
        }
        stage('Remove Image'){
           
            steps{
                    sh 'docker rmi -f 116361412831.dkr.ecr.ap-south-1.amazonaws.com/node-app:latest'
                    sh 'docker rmi -f node-app:latest'

                } 

            }
        
        
        
    }
}
    
